@model TournamentSystem.ViewModels.TournamentDetailsViewModel
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = "Drabinka turnieju";
}


@* Nowy kontener dla głównej treści drabinki, który otrzyma dynamiczny margines *@
<div id="mainContent">
    <h2>Drabinka turnieju: @Model.Tournament.Name</h2>

    @* Placeholder dla zawartości drabinki, która będzie odświeżana dynamicznie *@
    <div id="bracketContentPlaceholder">
        @await Html.PartialAsync("_BracketContent", Model)
    </div>
</div>

<a asp-action="Details" asp-route-id="@Model.Tournament.Id" class="btn btn-secondary mt-3">← Powrót do turnieju</a>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>
    <script>
        const tournamentId = @Model.Tournament.Id;
        const bracketContentPlaceholder = document.getElementById('bracketContentPlaceholder');
        const mainContent = document.getElementById('mainContent'); // Pobierz nowy element mainContent
        const fixedAlerts = document.querySelector('.fixed-top-alerts'); // Pobierz kontener z alertami

        // Funkcja do dynamicznego dostosowywania marginesu górnego głównej treści
        function adjustMainContentMargin() {
            if (fixedAlerts && mainContent) {
                // Oblicz rzeczywistą wysokość kontenera z alertami
                const alertsHeight = fixedAlerts.offsetHeight;
                // Ustaw margines górny dla głównej treści, dodając trochę dodatkowego odstępu
                // Tak, aby treść nie zakrywała pasków nawigacji i alertów
                mainContent.style.marginTop = `${alertsHeight + 20}px`; 
            }
        }

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/matchHub")
            .build();

        connection.on("bracketUpdated", async function (tid) {
            if (tid === tournamentId) {
                console.log("Drabinka zaktualizowana – pobieram nową zawartość.");
                try {
                    // Wykonaj zapytanie AJAX, aby pobrać zaktualizowany widok częściowy drabinki
                    const response = await fetch(`/Tournament/Bracket/${tournamentId}?isPartial=true`);
                    if (response.ok) {
                        const html = await response.text();
                        bracketContentPlaceholder.innerHTML = html; // Zastąp zawartość placeholderu
                        adjustMainContentMargin(); // Ponownie dostosuj margines po załadowaniu nowej treści
                    } else {
                        console.error('Błąd podczas pobierania aktualizacji drabinki:', response.statusText);
                        // Fallback na pełne odświeżenie strony w przypadku błędu
                        location.reload(); 
                    }
                } catch (error) {
                    console.error('Błąd sieci podczas pobierania aktualizacji drabinki:', error);
                    // Fallback na pełne odświeżenie strony w przypadku błędu sieci
                    location.reload(); 
                }
            }
        });

        connection.start().then(function () {
            connection.invoke("JoinBracketGroup", tournamentId.toString());
            adjustMainContentMargin(); // Dostosuj margines po uruchomieniu połączenia
        }).catch(function (err) {
            console.error(err.toString());
        });

        window.addEventListener("beforeunload", function () {
            connection.invoke("LeaveBracketGroup", tournamentId.toString());
        });

        // Dostosuj margines po załadowaniu strony oraz przy zmianie rozmiaru okna
        window.addEventListener('load', adjustMainContentMargin);
        window.addEventListener('resize', adjustMainContentMargin);
    </script>
}

