@model TournamentSystem.ViewModels.PaginatedTournamentViewModel
@{
    ViewData["Title"] = "Upcoming Tournaments";
    string currentFilter = Model.CurrentFilter;
    string currentSort = Model.CurrentSort ?? "application"; // domyślny sort
}

<h2>@ViewData["Title"]</h2>

<a class="btn btn-primary mb-3" asp-action="Create">Create New Tournament</a>

<form method="get" class="d-flex gap-2 mb-3">
        <input type="text" name="search" value="@ViewData["CurrentFilter"]" class="form-control" placeholder="Szukaj..." />

        <select name="sort" class="form-select">
            <option value="">Sortuj według...</option>
            <option value="name" selected="@("name" == ViewData["CurrentSort"]?.ToString())">Nazwa</option>
            <option value="discipline" selected="@("discipline" == ViewData["CurrentSort"]?.ToString())">Dyscyplina</option>
            <option value="date" selected="@("date" == ViewData["CurrentSort"]?.ToString())">Data</option>
            <option value="applicationDeadline" selected="@("applicationDeadline" == ViewData["CurrentSort"]?.ToString())">Deadline zgłoszeń</option>
        </select>

        <select name="direction" class="form-select">
            <option value="asc" selected="@("asc" == ViewData["CurrentDirection"]?.ToString())">Rosnąco</option>
            <option value="desc" selected="@("desc" == ViewData["CurrentDirection"]?.ToString())">Malejąco</option>
        </select>

        <button type="submit" class="btn btn-primary">Zastosuj</button>
    </form>

@if (!string.IsNullOrEmpty(currentFilter))
{
    <div class="alert alert-info d-flex justify-content-between align-items-center">
        <div>Wyniki wyszukiwania dla: <strong>@currentFilter</strong></div>
        <a asp-action="Index" class="btn btn-sm btn-outline-secondary">Resetuj filtr</a>
    </div>
}

@if (Model.Tournaments.Count == 0)
{
    <div class="alert alert-warning">
        Nie znaleziono żadnych turniejów dla podanego filtra.
    </div>
}
else
{
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>Turniej</th>
                <th>Dyscyplina</th>
                <th>Data</th>
                <th>Deadline zgłoszeń</th>
                <th>Lokalizacja</th>
                <th>Maks. uczestników</th>
                <th>Wolne miejsca</th>
                <th>Status</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var t in Model.Tournaments)
            {
                var freeSpots = t.MaxParticipants - t.Participants.Count;
                var rowClass = t.Status switch
                {
                    TournamentSystem.Models.TournamentStatus.Upcoming => "table-success",
                    TournamentSystem.Models.TournamentStatus.Active => "table-warning",
                    TournamentSystem.Models.TournamentStatus.Finished => "table-secondary",
                    _ => ""
                };

                <tr class="@rowClass">
                    <td>@t.Name</td>
                    <td>@t.Discipline</td>
                    <td>@t.Date.ToString("dd/MM/yyyy HH:mm")</td>
                    <td>@t.ApplicationDeadline.ToString("dd/MM/yyyy HH:mm")</td>
                    <td>@t.Location</td>
                    <td>@t.MaxParticipants</td>
                    <td>@freeSpots</td>
                    <td>@t.Status</td>
                    <td>
                        <a asp-action="Details"
                        asp-route-id="@t.Id"
                        asp-route-search="@Model.CurrentFilter"
                        asp-route-sort="@Model.CurrentSort"
                        asp-route-page="@Model.CurrentPage">
                        Details
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (Model.TotalPages > 1)
    {
        <nav aria-label="Tournament pagination">
            <ul class="pagination justify-content-center">
                @if (Model.CurrentPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link" asp-action="Index" asp-route-page="@(Model.CurrentPage - 1)" asp-route-search="@Model.CurrentFilter" asp-route-sort="@currentSort">Poprzednia</a>
                    </li>
                }
                else
                {
                    <li class="page-item disabled">
                        <span class="page-link">Poprzednia</span>
                    </li>
                }

                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                        <a class="page-link" asp-action="Index" asp-route-page="@i" asp-route-search="@Model.CurrentFilter" asp-route-sort="@currentSort">@i</a>
                    </li>
                }

                @if (Model.CurrentPage < Model.TotalPages)
                {
                    <li class="page-item">
                        <a class="page-link" asp-action="Index" asp-route-page="@(Model.CurrentPage + 1)" asp-route-search="@Model.CurrentFilter" asp-route-sort="@currentSort">Następna</a>
                    </li>
                }
                else
                {
                    <li class="page-item disabled">
                        <span class="page-link">Następna</span>
                    </li>
                }
            </ul>
        </nav>
    }
}
