@model TournamentSystem.ViewModels.TournamentDetailsViewModel
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager

@{
    var returnUrl = Context.Request.Path + Context.Request.QueryString;
}

@functions {
    public string GetEmbedMapUrl(string url)
    {
        if (string.IsNullOrEmpty(url))
            return null;

        if (url.Contains("maps.app.goo.gl"))
        {
            var lastSegment = url.Substring(url.LastIndexOf('/') + 1);
            return $"https://maps.google.com/maps?q={lastSegment}&output=embed";
        }

        if (url.Contains("google.com/maps/embed"))
            return url;

        return $"https://maps.google.com/maps?q={Uri.EscapeDataString(url)}&output=embed";
    }
}

@{
    ViewData["Title"] = "Tournament Details";
    var embedMapUrl = GetEmbedMapUrl(Model.Tournament.Location);
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">
        @TempData["ErrorMessage"]
    </div>
}

@if (TempData["Success"] != null)
{
    <div class="alert alert-success">
        @TempData["Success"]
    </div>
}

<h2>@Model.Tournament.Name</h2>

<p><strong>Discipline:</strong> @Model.Tournament.Discipline</p>
<p><strong>Date:</strong> @Model.Tournament.Date</p>
<p><strong>Application deadline:</strong> @(Model.Tournament.ApplicationDeadline)</p>
<p><strong>Location:</strong> @Model.Tournament.Location</p>
@if (!string.IsNullOrWhiteSpace(embedMapUrl))
{
    <div class="map-responsive" style="max-width: 100%; height: 450px;">
        <iframe 
            src="@embedMapUrl"
            width="100%" 
            height="450" 
            style="border:0;" 
            allowfullscreen="" 
            loading="lazy" 
            referrerpolicy="no-referrer-when-downgrade">
        </iframe>
    </div>
}
else
{
    <p>Brak mapy do wyświetlenia</p>
}
<p><strong>Max Participants:</strong> @Model.Tournament.MaxParticipants</p>
<p><strong>Free spots:</strong> @Model.FreeSpots</p>
<p><strong>Organizer:</strong> @Model.Tournament.OrganizerId</p>
@if (!string.IsNullOrWhiteSpace(Model.Tournament.SponsorLogos))
{
    var sponsorUrls = Model.Tournament.SponsorLogos.Split(',', StringSplitOptions.RemoveEmptyEntries);
    <p><strong>Sponsorzy:</strong></p>
    <div class="d-flex flex-wrap gap-2">
        @foreach (var url in sponsorUrls)
        {
            <img src="@url.Trim()" alt="Sponsor logo" style="max-height: 60px;" />
        }
    </div>
}


<hr />

<p><strong>Status turnieju:</strong> 
    @switch(Model.Tournament.Status)
    {
        case TournamentSystem.Models.TournamentStatus.Upcoming:
            @:Nadchodzący
            break;
        case TournamentSystem.Models.TournamentStatus.Active:
            @:Aktywny
            break;
        case TournamentSystem.Models.TournamentStatus.Finished:
            @:Zakończony
            break;
    }
</p>


<h4>Participants (@Model.Participants.Count)</h4>
<ul>
    @foreach (var p in Model.Participants.OrderBy(p => p.Ranking))
    {
        <li>@p.User.UserName - Licencja: @p.LicenseNumber, Ranking: @p.Ranking</li>
    }
</ul>

@if (User.Identity.IsAuthenticated && Model.IsOrganizer)
{
    
}

@if (Model.Tournament.Status == TournamentSystem.Models.TournamentStatus.Upcoming)
{
    if (User.Identity.IsAuthenticated)
    {
        if (Model.IsUserParticipant)
        {
            <form asp-action="Withdraw" method="post">
                <input type="hidden" name="tournamentId" value="@Model.Tournament.Id" />
                <button type="submit" class="btn btn-danger">Zrezygnuj z udziału</button>
            </form>
        }
        else if (Model.FreeSpots > 0)
        {
            <a class="btn btn-success" asp-action="Apply" asp-route-id="@Model.Tournament.Id">Zapisz się</a>
        }
        else
        {
            <p class="text-danger">Brak wolnych miejsc</p>
        }

        if (Model.IsOrganizer)
        {
            <a asp-action="Edit" asp-route-id="@Model.Tournament.Id" class="btn btn-warning">Edytuj turniej</a>
            <form asp-action="GenerateLadder" asp-route-id="@Model.Tournament.Id" method="post">
                <button type="submit" class="btn btn-primary">
                    Rozpocznij turniej i wygeneruj drabinkę
                </button>
            </form>
        }
    }
    else
    {
        <a class="btn btn-warning"
        asp-area=""
        asp-controller="Account"
        asp-action="Login"
        asp-route-returnUrl="@returnUrl">
        Zaloguj się, aby zapisać się
        </a>

    }
}


<h3>Drabinka turnieju</h3>

@if (Model.Tournament.Status == TournamentSystem.Models.TournamentStatus.Active || Model.Tournament.Status == TournamentSystem.Models.TournamentStatus.Finished)
{
    if (Model.Participants.Count > 2)
    {
        <a class="btn btn-success" href="/Tournament/Bracket/@Model.Tournament.Id">Pokaż drabinkę</a>
    }
    else
    {
        <p class="alert alert-info">Turniej został anulowany ze względu na zbyt małą liczbę uczestników.</p>
    }
}
else
{
    <p>Drabinka będzie dostępna po rozpoczęciu turnieju.</p>
}


<a asp-action="Index"
   asp-route-search="@ViewData["CurrentFilter"]"
   asp-route-sort="@ViewData["CurrentSort"]"
   asp-route-page="@ViewData["CurrentPage"]"
   class="btn btn-primary">
   ← Powrót do listy
</a>
