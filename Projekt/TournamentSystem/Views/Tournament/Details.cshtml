@model TournamentSystem.ViewModels.TournamentDetailsViewModel
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager // Inject UserManager

@{
    var returnUrl = Context.Request.Path + Context.Request.QueryString;
}

@functions {
    // This GetEmbedMapUrl logic is from your working version
    public string GetEmbedMapUrl(string url)
    {
        if (string.IsNullOrEmpty(url))
            return null;

        if (url.Contains("maps.app.goo.gl"))
        {
            var lastSegment = url.Substring(url.LastIndexOf('/') + 1);
            return $"https://maps.google.com/maps?q={lastSegment}&output=embed";
        }

        if (url.Contains("google.com/maps/embed"))
            return url;

        return $"https://maps.google.com/maps?q={Uri.EscapeDataString(url)}&output=embed";
    }
}

@{
    ViewData["Title"] = "Szczegóły turnieju"; // Changed from "Tournament Details"
    var embedMapUrl = GetEmbedMapUrl(Model.Tournament.Location);

    // Get the organizer's username to display
    var organizerUser = await UserManager.FindByIdAsync(Model.Tournament.OrganizerId);
    var organizerUserName = organizerUser?.UserName ?? "Nieznany organizator";
}

@* TempData Messages *@
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">
        @TempData["ErrorMessage"]
    </div>
}

@if (TempData["Success"] != null)
{
    <div class="alert alert-success">
        @TempData["Success"]
    </div>
}



<div class="row">
    @* Left Column - Tournament Information *@
    <div class="col-md-6">
        <h2 style="margin-top:25px;">@Model.Tournament.Name</h2>
        <p><strong>Dyscyplina:</strong> @Model.Tournament.Discipline</p>
        <p><strong>Data:</strong> @Model.Tournament.Date.ToString("dd.MM.yyyy HH:mm")</p>
        <p><strong>Termin zgłoszeń:</strong> @(Model.Tournament.ApplicationDeadline.ToString("dd.MM.yyyy HH:mm"))</p>
        <p><strong>Lokalizacja:</strong> @Model.Tournament.Location</p>
        <p><strong>Maksymalna liczba uczestników:</strong> @Model.Tournament.MaxParticipants</p>
        <p><strong>Wolne miejsca:</strong> @Model.FreeSpots</p>
        <p><strong>Organizator:</strong> @organizerUserName</p> @* Display organizer's username *@

        @if (!string.IsNullOrWhiteSpace(Model.Tournament.SponsorLogos))
        {
            var sponsorUrls = Model.Tournament.SponsorLogos.Split(',', StringSplitOptions.RemoveEmptyEntries);
            <p><strong>Sponsorzy:</strong></p>
            <div class="d-flex flex-wrap gap-2 mb-3">
                @foreach (var url in sponsorUrls)
                {
                    <img src="@url.Trim()" alt="Logo sponsora" style="max-height: 60px; border: 1px solid #ddd; padding: 5px; background-color: white;" />
                }
            </div>
        }
        <p>
            <strong>Status turnieju:</strong> 
            @switch(Model.Tournament.Status)
            {
                case TournamentSystem.Models.TournamentStatus.Upcoming:
                    @:Nadchodzący
                    break;
                case TournamentSystem.Models.TournamentStatus.Active:
                    @:Aktywny
                    break;
                case TournamentSystem.Models.TournamentStatus.Finished:
                    @:Zakończony
                    break;
            }
        </p>
    </div>

    @* Right Column - Map *@
    <div class="col-md-6">
        @if (!string.IsNullOrWhiteSpace(embedMapUrl))
        {
            <div class="map-responsive" style="max-width: 100%; height: 450px;">
                <iframe 
                    src="@embedMapUrl"
                    width="100%" 
                    height="450" 
                    style="border:0;" 
                    allowfullscreen="" 
                    loading="lazy" 
                    referrerpolicy="no-referrer-when-downgrade">
                </iframe>
            </div>
        }
        else
        {
            <p>Brak mapy do wyświetlenia.</p>
        }
    </div>
</div>

@* Sections below the two columns *@
<hr />

<h4 style="margin-top:50px;">Uczestnicy (@Model.Participants.Count)</h4>
<ul class="list-group mb-3">
    @foreach (var p in Model.Participants.OrderBy(p => p.Ranking))
    {
        <li class="list-group-item">@p.User.UserName - Licencja: @p.LicenseNumber, Ranking: @p.Ranking</li>
    }
</ul>

@* Action Buttons (below participants) *@
@if (Model.Tournament.Status == TournamentSystem.Models.TournamentStatus.Upcoming)
{
    if (User.Identity.IsAuthenticated)
    {
        if (Model.IsUserParticipant)
        {
            <form asp-action="Withdraw" method="post" class="d-inline-block me-2">
                <input type="hidden" name="tournamentId" value="@Model.Tournament.Id" />
                <button type="submit" class="btn btn-danger">Zrezygnuj z udziału</button>
            </form>
        }
        else if (Model.FreeSpots > 0)
        {
            <a class="btn btn-success me-2" asp-action="Apply" asp-route-id="@Model.Tournament.Id">Zapisz się</a>
        }
        else
        {
            <p class="text-danger">Brak wolnych miejsc</p>
        }

        if (Model.IsOrganizer)
        {
            <a asp-action="Edit" asp-route-id="@Model.Tournament.Id" class="btn btn-warning me-2">Edytuj turniej</a>
            <form asp-action="GenerateLadder" asp-route-id="@Model.Tournament.Id" method="post" class="d-inline-block" onsubmit="return confirmGenerateLadder();">
                <button type="submit" class="btn btn-primary">
                    Rozpocznij turniej i wygeneruj drabinkę
                </button>
            </form>
        }
    }
    else
    {
        <a class="btn btn-warning"
        asp-area=""
        asp-controller="Account"
        asp-action="Login"
        asp-route-returnUrl="@returnUrl">
        Zaloguj się, aby zapisać się
        </a>
    }
}

<h3 style="margin-top:25px;">Drabinka turnieju</h3>

@if (Model.Tournament.Status == TournamentSystem.Models.TournamentStatus.Active || Model.Tournament.Status == TournamentSystem.Models.TournamentStatus.Finished)
{
    if (Model.Participants.Count >= 2)
    {
        <a class="btn btn-success"
            asp-controller="Tournament"
            asp-action="Bracket"
            asp-route-id="@Model.Tournament.Id">
            Pokaż drabinkę
        </a>
    }
    else
    {
        <p class="alert alert-info">Turniej został anulowany ze względu na zbyt małą liczbę uczestników.</p>
    }
}
else
{
    <p>Drabinka będzie dostępna po rozpoczęciu turnieju.</p>
}
<br/>
<a asp-action="Index"
    asp-route-search="@ViewData["CurrentFilter"]"
    asp-route-sort="@ViewData["CurrentSort"]"
    asp-route-page="@ViewData["CurrentPage"]"
    class="btn btn-primary mt-3">
    ← Powrót do listy
</a>

@section Scripts {
    <script>
        function confirmGenerateLadder() {
            return confirm("Czy na pewno chcesz rozpocząć turniej i wygenerować drabinkę? Tej operacji nie można cofnąć.");
        }
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>
    <script>
        const tournamentId = @Model.Tournament.Id;

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/matchHub") // Use the same SignalR Hub
            .build();

        // Listen for the "tournamentStatusUpdated" event
        connection.on("tournamentStatusUpdated", function (tid) {
            if (tid === tournamentId) {
                console.log("Tournament status updated – refreshing details view.");
                location.reload(); // Refresh the entire tournament details page
            }
        });

        connection.start().then(function () {
            // Join the SignalR group for this specific tournament
            connection.invoke("JoinBracketGroup", tournamentId.toString()); 
        }).catch(function (err) {
            console.error(err.toString());
        });

        // Leave the SignalR group when the user leaves the page
        window.addEventListener("beforeunload", function () {
            connection.invoke("LeaveBracketGroup", tournamentId.toString());
        });
    </script>
}
